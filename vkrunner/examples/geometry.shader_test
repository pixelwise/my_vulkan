# Copyright (c) 2018 Google LLC.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

[require]
geometryShader

[vertex shader]
#version 430

layout(location = 0) in vec4 position;
layout(location = 1) in vec4 color_in;
layout(location = 0) out vec4 color_out;

void
main()
{
        gl_Position = position;
        color_out = color_in;
}

[geometry shader]
#version 430

layout (points) in;
layout (triangle_strip, max_vertices = 6) out;

layout(location = 0) in vec4 color_in[];

layout(location = 0) out vec4 color_out;

void
main()
{
        gl_Position = gl_in[0].gl_Position;
        color_out = color_in[0];
        EmitVertex();

        gl_Position = vec4(gl_in[0].gl_Position.x + 1.0,
                           gl_in[0].gl_Position.y,
                           0.0, 1.0);
        color_out = color_in[0];
        EmitVertex();

        gl_Position = vec4(gl_in[0].gl_Position.x + 1.0,
                           gl_in[0].gl_Position.y + 1.0,
                           0.0, 1.0);
        color_out = color_in[0];
        EmitVertex();
        EndPrimitive();


        gl_Position = vec4(gl_in[0].gl_Position.x,
                           gl_in[0].gl_Position.y + 1.0,
                           0.0, 1.0);
        color_out = color_in[0];
        EmitVertex();

        gl_Position = vec4(gl_in[0].gl_Position.x + 1.0,
                           gl_in[0].gl_Position.y + 1.0,
                           0.0, 1.0);
        color_out = color_in[0];
        EmitVertex();

        gl_Position = gl_in[0].gl_Position;
        color_out = color_in[0];
        EmitVertex();
        EndPrimitive();
}

[fragment shader]
#version 430

layout(location = 0) in vec4 color_in;
layout(location = 0) out vec4 color_out;

void
main()
{
        color_out = color_in;
}

[vertex data]
# position      color
0/R32G32_SFLOAT 1/A8B8G8R8_UNORM_PACK32

# a point with green color
0 0          0xff00ff00

[test]
clear

draw arrays POINT_LIST 0 1

#                       (x, y, w, h)
relative probe rect rgb (0.6, 0.6, 0.4, 0.4) (0, 1, 0)

# check a single point
relative probe rgb (0.5, 0.5) (0, 1, 0)
